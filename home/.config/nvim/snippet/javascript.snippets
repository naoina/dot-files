snippet for "for" !b
for (let ${1:i} = 0; $1 < $2; ++$1) {
	$0
}
endsnippet

snippet forr "for-of" !b
for (const ${1:v} of $2) {
	$0
}
endsnippet

snippet if "if" !b
if ($1) {
	$0
}
endsnippet

snippet d "document" iw
document
endsnippet

snippet w "window" iw
window
endsnippet

snippet f "function" iw
function($1) {
	${0:// TODO: not implemented yet}
}
endsnippet

snippet fg "function *" iw
function *($1) {
	${0:// TODO: not implemented yet}
}
endsnippet

snippet f> "()=>" i
($1)=> {
	${0:// TODO: not implemented yet}
}
endsnippet

snippet r "return" !b
return $0;
endsnippet

snippet v "var" iw
var ${1:varname}${2: = ${3:value}}
endsnippet

snippet = "assign" i
${1:varname} = ${2:value}
endsnippet

snippet , "assign" i
, ${1:varname} = ${2:value}
endsnippet

snippet log "console.log" !w
console.log($0);
endsnippet

snippet err "console.error" !b
console.error($0);
endsnippet

snippet time "console.time" !w
console.time("$1");
console.timeEnd("$1");
endsnippet

snippet define "define" b
define([$1], function ($2) {
	function ${3:moduleName}() {
		$0
	}

	return $3;
});
endsnippet

snippet require "require" b
require([$1], function ($2) {
	$0
});
endsnippet

snippet de "describe" b
describe("${1:describe}", ()=> {
	$0
});
endsnippet

snippet it "it" b
it("should $1", ()=> {
	${0:done();}
});
endsnippet

snippet itg "it function *" !b
it("should $1", function *() {
	${0:// TODO: not implemented yet}
});
endsnippet

snippet be "beforeEach" b
beforeEach(()=> {
	${0:done();}
});
endsnippet

snippet beg "beforeEach function *" !b
beforeEach(function *() {
	${0:// TODO: not implemented yet}
});
endsnippet

snippet before "before" b
before(()=> {
	${0:done();}
});
endsnippet

snippet af "afterEach" b
afterEach(()=> {
	${0:done();}
});
endsnippet

snippet afg "afterEach function *" !b
afterEach(function *() {
	${0:// TODO: not implemented yet}
});
endsnippet

snippet after "after" b
after(()=> {
	${0:done();}
});
endsnippet

snippet p "expect" b
expect($1).to.${2:equal($3);}
endsnippet

snippet eq "expect eql" b
expect($1).to.eql({
	$0
});
endsnippet

snippet co "const" !b
const 
endsnippet

snippet req "require" !b
const ${1:module} = require('$1');
endsnippet

snippet as "assert" !b
assert(${1:actual} === ${2:expected});
endsnippet

snippet try "try-catch" !b
try {
	$1
} catch (err) {
	$2
}
endsnippet

snippet class "class" !b
class ${1:ClassName} {
	constructor() {
	}
}
endsnippet

snippet m "method" !b
${1:methodName}($2) {
	${0://TODO: not implemented yet}
}
endsnippet

snippet ex "export" !b
export const ${1:exportName} = {
}
endsnippet

snippet exd "export default" !b
export default {
}
endsnippet

snippet i "import from" !b
import $1 from '$2'
endsnippet

snippet sw "switch" !b
switch (${1:cond}) {
	// TODO
}
endsnippet
